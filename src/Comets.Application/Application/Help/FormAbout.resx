<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        A0M7GP4/W/fuKbwPnGMAAAAASUVORK5CYII=
</value>
  </data>
</root>